/// <reference path="../@types/spicetify.d.ts" />

(function simfinderExtension() {
  if (!(Spicetify?.Topbar && Spicetify?.PopupModal && Spicetify?.CosmosAsync && Spicetify?.showNotification && Spicetify?.ContextMenu && Spicetify?.URI)) {
    setTimeout(simfinderExtension, 300);
    return;
  }

  // SVG-иконка для кнопки
  const icon = `<svg viewBox="0 0 16 16" width="16" height="16"><circle cx="8" cy="8" r="7" stroke="currentColor" stroke-width="2" fill="none"/><path d="M4 8a4 4 0 1 1 8 0 4 4 0 1 1-8 0" fill="currentColor"/></svg>`;

  async function getTrackDetails(trackId) {
    try {
      const res = await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/audio-features/${trackId}`);
      const resTrack = await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/tracks/${trackId}`);
      
      // Fetch full album details to get label and potentially album genres
      const albumId = resTrack.album.id;
      const resAlbum = await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/albums/${albumId}`);
      
      // Fetch artist data as fallback for genres
      const artistId = resTrack.artists[0].id;
      const resArtist = await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/artists/${artistId}`);

      let genresList = [];
      if (resAlbum.genres && resAlbum.genres.length > 0) {
        genresList = resAlbum.genres;
      } else if (resArtist.genres && resArtist.genres.length > 0) {
        genresList = resArtist.genres;
      }
      const genresText = genresList.length > 0 ? genresList.join(", ") : "pop";

      return {
        danceability: res.danceability,
        energy: res.energy,
        valence: res.valence,
        tempo: res.tempo,
        popularity: resTrack.popularity,
        genres: genresText,
        seed_track: trackId, // Для рекомендаций
        track_name: resTrack.name, // Добавляем название трека
        key: res.key // Добавляем тональность
      };
    } catch (e) {
      console.error("Error fetching track details:", e);
      Spicetify.showNotification("Error fetching track details: " + (e.message || e), "error");
      return null;
    }
  }

  async function findAndCreatePlaylist(params, findBtn) {
    if (findBtn) findBtn.textContent = "Finding...";
    try {
      // 1. Получить user id
      const me = await Spicetify.CosmosAsync.get("https://api.spotify.com/v1/me");
      const userId = me.id;

      // 2. Получить рекомендации
      const queryParams = {
        limit: 50,
        seed_genres: params.genres || "pop",
      };

      if (params.findByKey) {
        // For find by key, use target parameters and add key
        queryParams.target_danceability = params.danceability;
        queryParams.target_energy = params.energy;
        queryParams.target_valence = params.valence;
        queryParams.target_tempo = params.tempo;
        queryParams.target_popularity = params.popularity;
        if (params.key !== undefined) {
          queryParams.target_key = params.key;
        }
      } else {
        // For similar songs, use target parameters
        queryParams.target_danceability = params.danceability;
        queryParams.target_energy = params.energy;
        queryParams.target_valence = params.valence;
        queryParams.target_tempo = params.tempo;
        queryParams.target_popularity = params.popularity;
      }

      if (params.seed_track) {
        queryParams.seed_tracks = params.seed_track;
      }

      const query = new URLSearchParams(queryParams).toString();
      const rec = await Spicetify.CosmosAsync.get(`https://api.spotify.com/v1/recommendations?${query}`);
      if (!rec.tracks || rec.tracks.length === 0) {
        Spicetify.showNotification("No similar tracks found.", "error");
        return;
      }
      const uris = rec.tracks.map(t => t.uri);

      // 3. Создать плейлист
      let playlistDescription = "Playlist generated by SimFinder Spicetify Extension";
      if (params.track_name && params.genres) {
        playlistDescription = `SF \"${params.track_name}\", \"${params.genres}\"`;
      } else if (params.genres) {
        playlistDescription = `SF \"${params.genres}\"`;
      }

      if (params.findByKey && params.key !== undefined) {
        const keyNames = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];
        const keyString = keyNames[params.key];
        playlistDescription += `, Key: ${keyString}`;
      }

      const playlistName = `SimFinder: Similar Songs (${new Date().toLocaleString()})`;
      const playlist = await Spicetify.CosmosAsync.post(`https://api.spotify.com/v1/users/${userId}/playlists`, {
        name: playlistName,
        description: playlistDescription,
        public: false
      });
      const playlistId = playlist.id;

      // 4. Добавить треки
      await Spicetify.CosmosAsync.post(`https://api.spotify.com/v1/playlists/${playlistId}/tracks`, {
        uris
      });

      // 5. Уведомление с ссылкой
      const url = `https://open.spotify.com/playlist/${playlistId}`;
      Spicetify.showNotification(`Playlist created! <a href=\'${url}\' target=\'_blank\'>Open</a>`, "success", 8000);
    } catch (e) {
      Spicetify.showNotification("Error: " + (e.message || e), "error");
    } finally {
      if (findBtn) findBtn.textContent = "Find";
    }
  }

  async function showInputModal(initialParams = {}) {
    const content = document.createElement("div");
    content.innerHTML = `
      <style>
        .simfinder-field-group { margin-bottom: 12px; }
        .simfinder-label { display: block; margin-bottom: 4px; font-weight: 500; color: var(--spice-text); }
        .simfinder-input { width: calc(100% - 10px); padding: 8px; border: 1px solid var(--spice-border); border-radius: 4px; background: var(--spice-card); color: var(--spice-text); }
        .simfinder-find-btn { margin-top: 12px; padding: 10px 20px; background: var(--spice-button, #1db954); color: #fff; border: none; border-radius: 500px; font-size: 1em; cursor: pointer; transition: background 0.2s ease; }
        .simfinder-find-btn:hover { background: #1ed760; }
        .simfinder-find-btn:active { transform: scale(0.98); }
      </style>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-danceability">Danceability (0-1):</label>
        <input class="simfinder-input" id="simfinder-danceability" type="number" min="0" max="1" step="0.01">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-energy">Energy (0-1):</label>
        <input class="simfinder-input" id="simfinder-energy" type="number" min="0" max="1" step="0.01">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-valence">Valence (0-1):</label>
        <input class="simfinder-input" id="simfinder-valence" type="number" min="0" max="1" step="0.01">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-tempo">Tempo (BPM):</label>
        <input class="simfinder-input" id="simfinder-tempo" type="number" min="0" max="300" step="1">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-popularity">Popularity (0-100):</label>
        <input class="simfinder-input" id="simfinder-popularity" type="number" min="0" max="100" step="1">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-genres">Genres (comma separated):</label>
        <input class="simfinder-input" id="simfinder-genres" type="text">
      </div>
      <button class="simfinder-find-btn" id="simfinder-find-btn">Find</button>
    `;
    Spicetify.PopupModal.display({
      title: "Find Similar Songs",
      content,
      isLarge: true,
      confirm: false
    });
    setTimeout(() => {
      const danceabilityInput = document.getElementById("simfinder-danceability");
      const energyInput = document.getElementById("simfinder-energy");
      const valenceInput = document.getElementById("simfinder-valence");
      const tempoInput = document.getElementById("simfinder-tempo");
      const popularityInput = document.getElementById("simfinder-popularity");
      const genresInput = document.getElementById("simfinder-genres");
      const findBtn = document.getElementById("simfinder-find-btn");

      // Set initial values
      if (initialParams.danceability !== undefined) danceabilityInput.value = initialParams.danceability.toFixed(2);
      if (initialParams.energy !== undefined) energyInput.value = initialParams.energy.toFixed(2);
      if (initialParams.valence !== undefined) valenceInput.value = initialParams.valence.toFixed(2);
      if (initialParams.tempo !== undefined) tempoInput.value = Math.round(initialParams.tempo);
      if (initialParams.popularity !== undefined) popularityInput.value = initialParams.popularity;
      if (initialParams.genres !== undefined) genresInput.value = initialParams.genres;

      findBtn.onclick = () => {
        const danceability = parseFloat(danceabilityInput.value);
        const energy = parseFloat(energyInput.value);
        const valence = parseFloat(valenceInput.value);
        const tempo = parseFloat(tempoInput.value);
        const popularity = parseInt(popularityInput.value);
        const genres = genresInput.value.split(",").map(g => g.trim()).filter(Boolean).join(",");
        Spicetify.PopupModal.hide();
        findAndCreatePlaylist({ danceability, energy, valence, tempo, popularity, genres, seed_track: initialParams.seed_track, track_name: initialParams.track_name }, findBtn);
      };
    }, 0);
  }

  // New function for find by key input modal
  async function showFindByKeyInputModal(initialParams = {}) {
    const content = document.createElement("div");
    content.innerHTML = `
      <style>
        .simfinder-field-group { margin-bottom: 12px; }
        .simfinder-label { display: block; margin-bottom: 4px; font-weight: 500; color: var(--spice-text); }
        .simfinder-input { width: calc(100% - 10px); padding: 8px; border: 1px solid var(--spice-border); border-radius: 4px; background: var(--spice-card); color: var(--spice-text); }
        .simfinder-find-btn { margin-top: 12px; padding: 10px 20px; background: var(--spice-button, #1db954); color: #fff; border: none; border-radius: 500px; font-size: 1em; cursor: pointer; transition: background 0.2s ease; }
        .simfinder-find-btn:hover { background: #1ed760; }
        .simfinder-find-btn:active { transform: scale(0.98); }
      </style>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-danceability-key">Danceability (0-1):</label>
        <input class="simfinder-input" id="simfinder-danceability-key" type="number" min="0" max="1" step="0.01">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-energy-key">Energy (0-1):</label>
        <input class="simfinder-input" id="simfinder-energy-key" type="number" min="0" max="1" step="0.01">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-valence-key">Valence (0-1):</label>
        <input class="simfinder-input" id="simfinder-valence-key" type="number" min="0" max="1" step="0.01">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-tempo-key">Tempo (BPM):</label>
        <input class="simfinder-input" id="simfinder-tempo-key" type="number" min="0" max="300" step="1">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-popularity-key">Popularity (0-100):</label>
        <input class="simfinder-input" id="simfinder-popularity-key" type="number" min="0" max="100" step="1">
      </div>
      <div class="simfinder-field-group">
        <label class="simfinder-label" for="simfinder-genres-key">Genres (comma separated):</label>
        <input class="simfinder-input" id="simfinder-genres-key" type="text">
      </div>
      <button class="simfinder-find-btn" id="simfinder-find-by-key-btn">Find by Key</button>
    `;
    Spicetify.PopupModal.display({
      title: "Find Songs by Key",
      content,
      isLarge: true,
      confirm: false
    });
    setTimeout(() => {
      const danceabilityInput = document.getElementById("simfinder-danceability-key");
      const energyInput = document.getElementById("simfinder-energy-key");
      const valenceInput = document.getElementById("simfinder-valence-key");
      const tempoInput = document.getElementById("simfinder-tempo-key");
      const popularityInput = document.getElementById("simfinder-popularity-key");
      const genresInput = document.getElementById("simfinder-genres-key");
      const findBtn = document.getElementById("simfinder-find-by-key-btn");

      // Set initial values
      if (initialParams.danceability !== undefined) danceabilityInput.value = initialParams.danceability.toFixed(2);
      if (initialParams.energy !== undefined) energyInput.value = initialParams.energy.toFixed(2);
      if (initialParams.valence !== undefined) valenceInput.value = initialParams.valence.toFixed(2);
      if (initialParams.tempo !== undefined) tempoInput.value = Math.round(initialParams.tempo);
      if (initialParams.popularity !== undefined) popularityInput.value = initialParams.popularity;
      if (initialParams.genres !== undefined) genresInput.value = initialParams.genres;

      findBtn.onclick = () => {
        const danceability = parseFloat(danceabilityInput.value);
        const energy = parseFloat(energyInput.value);
        const valence = parseFloat(valenceInput.value);
        const tempo = parseFloat(tempoInput.value);
        const popularity = parseInt(popularityInput.value);
        const genres = genresInput.value.split(",").map(g => g.trim()).filter(Boolean).join(",");

        Spicetify.PopupModal.hide();
        findAndCreatePlaylist({ danceability, energy, valence, tempo, popularity, genres, seed_track: initialParams.seed_track, track_name: initialParams.track_name, findByKey: true, key: initialParams.key }, findBtn);
      };
    }, 0);
  }

  // Topbar Button
  new Spicetify.Topbar.Button(
    "Find Similar Songs", // tooltip
    icon,
    () => showInputModal() // Call without initial params for manual input
  );

  // Context Menu Item
  new Spicetify.ContextMenu.Item(
    "Find Similar Songs (SimFinder)",
    async (uris) => {
      const trackId = Spicetify.URI.fromString(uris[0]).id;
      if (trackId) {
        const details = await getTrackDetails(trackId);
        if (details) {
          showInputModal(details);
        }
      }
    },
    (uris) => uris.length === 1 && Spicetify.URI.fromString(uris[0]).type === Spicetify.URI.Type.TRACK,
    icon // Use the same icon
  ).register();

  // Context Menu Item for Find by Key
  new Spicetify.ContextMenu.Item(
    "Find by Key (SimFinder)",
    async (uris) => {
      const trackId = Spicetify.URI.fromString(uris[0]).id;
      if (trackId) {
        const details = await getTrackDetails(trackId);
        if (details) {
          showFindByKeyInputModal(details);
        }
      }
    },
    (uris) => uris.length === 1 && Spicetify.URI.fromString(uris[0]).type === Spicetify.URI.Type.TRACK,
    icon // Use the same icon
  ).register();
})(); 